openapi: 3.0.3
info:
  title: JobGem API
  version: 1.0.0
  description: API for jobgem application
  contact:
    email: e.govorushkin@gmail.com
servers:
  - url: http://localhost:8888/api/v1
    description: local development environment
tags:
  - name: job
    description: Retrieving and creating job
paths:
  /jobs:
    get:
      tags:
        - job
      summary: Get all jobs
      operationId: getAllJobs
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobDTO'
    post:
      tags:
        - job
      summary: Create a new job
      operationId: createJob
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobInputDTO'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDTO'

  /jobs/{jobId}:
    get:
      tags:
        - job
      summary: Get a job by ID
      operationId: getJobById
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDTO'
    put:
      tags:
        - job
      summary: Patch job
      operationId: patchJob
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobInputDTO'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDTO'
    delete:
      tags:
        - job
      summary: Delete a job
      operationId: deleteJob
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
  /companies:
    get:
      tags:
        - company
      summary: Get all companies
      operationId: getAllCompanies
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompanyDTO'
    post:
      tags:
        - company
      summary: Create a new company
      operationId: createCompany
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyInputDTO'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDTO'
  /companies/{companyId}:
    get:
      tags:
        - company
      summary: Get a company by ID
      operationId: getCompanyById
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDTO'
    put:
      tags:
        - company
      summary: Patch company
      operationId: patchCompany
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyInputDTO'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDTO'
    delete:
      tags:
        - company
      summary: Delete a company
      operationId: deleteCompany
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Use a valid JWT token to access this API
  schemas:
    JobDTO:
      type: object
      description: Data Transfer Object (DTO) for API responses
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        salaryMin:
          type: number
        salaryMax:
          type: number
        postDate:
          type: string
          format: date
        jobType:
          $ref: '#/components/schemas/JobType'
        location:
          type: string
    CompanyDTO:
      type: object
      description: Data Transfer Object (DTO) for API responses
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        websiteUrl:
          type: string
        logoUrl:
          type: string
        rating:
          type: string
          format: double
    JobInputDTO:
      type: object
      description: DTO for create and update operations (excludes read-only fields)
      properties:
        title:
          type: string
        description:
          type: string
        companyId:
          type: integer
          format: int64
        salaryMin:
          type: number
        salaryMax:
          type: number
        postDate:
          type: string
          format: date
        expirationDate:
          type: string
          format: date
        jobType:
          $ref: '#/components/schemas/JobType'
        location:
          type: string
    CompanyInputDTO:
      type: object
      description: DTO for create and update operations (excludes read-only fields)
      properties:
        name:
          type: string
        description:
          type: string
        websiteUrl:
          type: string
        logoUrl:
          type: string
        rating:
          type: number
          format: double
    JobType:
      type: string
      enum:
        - full_time
        - part_time
        - contract
        - internship
    Error:
      type: object
      description: Error in transaction
      properties:
        errorCode:
          type: string
          description: Code classifying error
        message:
          type: string
          description: Error description
  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
